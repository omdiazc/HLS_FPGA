-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inOutFunction is
port (
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    r1_V : OUT STD_LOGIC_VECTOR (12 downto 0);
    r1_V_ap_vld : OUT STD_LOGIC;
    r2_V : OUT STD_LOGIC_VECTOR (12 downto 0);
    r2_V_ap_vld : OUT STD_LOGIC;
    r3_V : OUT STD_LOGIC_VECTOR (12 downto 0);
    r3_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of inOutFunction is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "inOutFunction,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv13_40 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv13_1040 : STD_LOGIC_VECTOR (12 downto 0) := "1000001000000";
    constant ap_const_lv13_1FFC : STD_LOGIC_VECTOR (12 downto 0) := "1111111111100";
    constant ap_const_boolean_1 : BOOLEAN := true;



begin



    ap_done <= ap_start;
    ap_idle <= ap_const_logic_1;
    ap_ready <= ap_start;
    r1_V <= ap_const_lv13_40;

    r1_V_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            r1_V_ap_vld <= ap_const_logic_1;
        else 
            r1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    r2_V <= ap_const_lv13_1040;

    r2_V_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            r2_V_ap_vld <= ap_const_logic_1;
        else 
            r2_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    r3_V <= ap_const_lv13_1FFC;

    r3_V_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            r3_V_ap_vld <= ap_const_logic_1;
        else 
            r3_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
