// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "in_out.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const bool in_out::ap_const_boolean_1 = true;
const sc_logic in_out::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic in_out::ap_const_logic_0 = sc_dt::Log_0;

in_out::in_out(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_output_r);
    sensitive << ( input_r );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "in_out_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, input_r, "(port)input_r");
    sc_trace(mVcdFile, output_r, "(port)output_r");
#endif

    }
    mHdltvinHandle.open("in_out.hdltvin.dat");
    mHdltvoutHandle.open("in_out.hdltvout.dat");
}

in_out::~in_out() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void in_out::thread_output_r() {
    output_r = input_r.read();
}

void in_out::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"input_r\" :  \"" << input_r.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"output_r\" :  \"" << output_r.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

