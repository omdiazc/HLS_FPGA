// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="leading_one,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.046000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=103,HLS_VERSION=2020_1}" *)

module leading_one (
        a_V,
        ap_return
);


input  [8:0] a_V;
output  [4:0] ap_return;

wire   [0:0] tmp_3_fu_94_p3;
wire   [0:0] tmp_4_fu_108_p3;
wire   [0:0] tmp_5_fu_122_p3;
wire   [0:0] tmp_6_fu_136_p3;
wire   [0:0] trunc_ln48_fu_150_p1;
wire   [0:0] xor_ln48_fu_154_p2;
wire   [1:0] tmp_fu_168_p4;
wire   [8:0] and_ln_fu_178_p3;
wire   [0:0] tmp_2_fu_86_p3;
wire   [0:0] tmp_1_fu_78_p3;
wire   [0:0] or_ln1054_7_fu_192_p2;
wire   [0:0] xor_ln1054_4_fu_198_p2;
wire   [0:0] xor_ln1054_fu_102_p2;
wire   [0:0] and_ln1054_1_fu_210_p2;
wire   [0:0] xor_ln1054_1_fu_116_p2;
wire   [0:0] and_ln1054_3_fu_222_p2;
wire   [0:0] xor_ln1054_2_fu_130_p2;
wire   [0:0] and_ln1054_5_fu_234_p2;
wire   [0:0] xor_ln1054_3_fu_144_p2;
wire   [0:0] and_ln1054_7_fu_246_p2;
wire   [0:0] tmp_7_fu_252_p3;
wire   [1:0] tmp_8_fu_266_p4;
wire   [0:0] icmp_ln1054_1_fu_276_p2;
wire   [0:0] and_ln1054_9_fu_282_p2;
wire   [2:0] select_ln48_fu_160_p3;
wire   [2:0] select_ln1054_fu_288_p3;
wire   [0:0] and_ln1054_8_fu_260_p2;
wire   [0:0] and_ln1054_6_fu_240_p2;
wire   [0:0] and_ln1054_4_fu_228_p2;
wire   [0:0] and_ln1054_2_fu_216_p2;
wire   [0:0] and_ln1054_fu_204_p2;
wire   [0:0] icmp_ln1054_fu_186_p2;
wire   [0:0] or_ln1054_fu_300_p2;
wire  signed [3:0] sext_ln1054_fu_296_p1;
wire   [3:0] select_ln1054_1_fu_306_p3;
wire   [3:0] select_ln1054_4_fu_348_p3;
wire   [0:0] or_ln1054_1_fu_314_p2;
wire   [0:0] or_ln1054_2_fu_328_p2;
wire   [3:0] select_ln1054_2_fu_320_p3;
wire   [3:0] select_ln1054_3_fu_334_p3;
wire   [3:0] select_ln1054_5_fu_366_p3;
wire   [0:0] or_ln1054_3_fu_342_p2;
wire   [0:0] or_ln1054_4_fu_360_p2;
wire  signed [4:0] sext_ln1054_1_fu_356_p1;
wire   [4:0] zext_ln1054_fu_374_p1;
wire   [0:0] or_ln1054_5_fu_378_p2;
wire   [0:0] or_ln1054_6_fu_392_p2;
wire   [4:0] select_ln1054_6_fu_384_p3;

assign and_ln1054_1_fu_210_p2 = (xor_ln1054_fu_102_p2 & xor_ln1054_4_fu_198_p2);

assign and_ln1054_2_fu_216_p2 = (tmp_4_fu_108_p3 & and_ln1054_1_fu_210_p2);

assign and_ln1054_3_fu_222_p2 = (xor_ln1054_1_fu_116_p2 & and_ln1054_1_fu_210_p2);

assign and_ln1054_4_fu_228_p2 = (tmp_5_fu_122_p3 & and_ln1054_3_fu_222_p2);

assign and_ln1054_5_fu_234_p2 = (xor_ln1054_2_fu_130_p2 & and_ln1054_3_fu_222_p2);

assign and_ln1054_6_fu_240_p2 = (tmp_6_fu_136_p3 & and_ln1054_5_fu_234_p2);

assign and_ln1054_7_fu_246_p2 = (xor_ln1054_3_fu_144_p2 & and_ln1054_5_fu_234_p2);

assign and_ln1054_8_fu_260_p2 = (tmp_7_fu_252_p3 & and_ln1054_7_fu_246_p2);

assign and_ln1054_9_fu_282_p2 = (icmp_ln1054_1_fu_276_p2 & and_ln1054_7_fu_246_p2);

assign and_ln1054_fu_204_p2 = (xor_ln1054_4_fu_198_p2 & tmp_3_fu_94_p3);

assign and_ln_fu_178_p3 = {{tmp_fu_168_p4}, {7'd0}};

assign ap_return = ((or_ln1054_6_fu_392_p2[0:0] === 1'b1) ? select_ln1054_6_fu_384_p3 : 5'd1);

assign icmp_ln1054_1_fu_276_p2 = ((tmp_8_fu_266_p4 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln1054_fu_186_p2 = ((and_ln_fu_178_p3 == 9'd128) ? 1'b1 : 1'b0);

assign or_ln1054_1_fu_314_p2 = (and_ln1054_6_fu_240_p2 | and_ln1054_4_fu_228_p2);

assign or_ln1054_2_fu_328_p2 = (and_ln1054_fu_204_p2 | and_ln1054_2_fu_216_p2);

assign or_ln1054_3_fu_342_p2 = (tmp_1_fu_78_p3 | icmp_ln1054_fu_186_p2);

assign or_ln1054_4_fu_360_p2 = (or_ln1054_fu_300_p2 | or_ln1054_1_fu_314_p2);

assign or_ln1054_5_fu_378_p2 = (or_ln1054_3_fu_342_p2 | or_ln1054_2_fu_328_p2);

assign or_ln1054_6_fu_392_p2 = (or_ln1054_5_fu_378_p2 | or_ln1054_4_fu_360_p2);

assign or_ln1054_7_fu_192_p2 = (tmp_2_fu_86_p3 | tmp_1_fu_78_p3);

assign or_ln1054_fu_300_p2 = (and_ln1054_9_fu_282_p2 | and_ln1054_8_fu_260_p2);

assign select_ln1054_1_fu_306_p3 = ((and_ln1054_6_fu_240_p2[0:0] === 1'b1) ? 4'd3 : 4'd4);

assign select_ln1054_2_fu_320_p3 = ((and_ln1054_2_fu_216_p2[0:0] === 1'b1) ? 4'd5 : 4'd6);

assign select_ln1054_3_fu_334_p3 = ((icmp_ln1054_fu_186_p2[0:0] === 1'b1) ? 4'd7 : 4'd8);

assign select_ln1054_4_fu_348_p3 = ((or_ln1054_fu_300_p2[0:0] === 1'b1) ? sext_ln1054_fu_296_p1 : select_ln1054_1_fu_306_p3);

assign select_ln1054_5_fu_366_p3 = ((or_ln1054_2_fu_328_p2[0:0] === 1'b1) ? select_ln1054_2_fu_320_p3 : select_ln1054_3_fu_334_p3);

assign select_ln1054_6_fu_384_p3 = ((or_ln1054_4_fu_360_p2[0:0] === 1'b1) ? sext_ln1054_1_fu_356_p1 : zext_ln1054_fu_374_p1);

assign select_ln1054_fu_288_p3 = ((and_ln1054_9_fu_282_p2[0:0] === 1'b1) ? select_ln48_fu_160_p3 : 3'd2);

assign select_ln48_fu_160_p3 = ((xor_ln48_fu_154_p2[0:0] === 1'b1) ? 3'd7 : 3'd0);

assign sext_ln1054_1_fu_356_p1 = $signed(select_ln1054_4_fu_348_p3);

assign sext_ln1054_fu_296_p1 = $signed(select_ln1054_fu_288_p3);

assign tmp_1_fu_78_p3 = a_V[32'd8];

assign tmp_2_fu_86_p3 = a_V[32'd7];

assign tmp_3_fu_94_p3 = a_V[32'd6];

assign tmp_4_fu_108_p3 = a_V[32'd5];

assign tmp_5_fu_122_p3 = a_V[32'd4];

assign tmp_6_fu_136_p3 = a_V[32'd3];

assign tmp_7_fu_252_p3 = a_V[32'd2];

assign tmp_8_fu_266_p4 = {{a_V[2:1]}};

assign tmp_fu_168_p4 = {{a_V[8:7]}};

assign trunc_ln48_fu_150_p1 = a_V[0:0];

assign xor_ln1054_1_fu_116_p2 = (tmp_4_fu_108_p3 ^ 1'd1);

assign xor_ln1054_2_fu_130_p2 = (tmp_5_fu_122_p3 ^ 1'd1);

assign xor_ln1054_3_fu_144_p2 = (tmp_6_fu_136_p3 ^ 1'd1);

assign xor_ln1054_4_fu_198_p2 = (or_ln1054_7_fu_192_p2 ^ 1'd1);

assign xor_ln1054_fu_102_p2 = (tmp_3_fu_94_p3 ^ 1'd1);

assign xor_ln48_fu_154_p2 = (trunc_ln48_fu_150_p1 ^ 1'd1);

assign zext_ln1054_fu_374_p1 = select_ln1054_5_fu_366_p3;

endmodule //leading_one
