// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _inOutFunction_HH_
#define _inOutFunction_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct inOutFunction : public sc_module {
    // Port declarations 11
    sc_in< sc_logic > l;
    sc_in< sc_logic > r;
    sc_in< sc_logic > u;
    sc_in< sc_logic > d;
    sc_out< sc_logic > rule1;
    sc_out< sc_logic > rule2;
    sc_out< sc_logic > rule3;
    sc_out< sc_logic > rule4;
    sc_out< sc_logic > rule5;
    sc_out< sc_logic > ew;
    sc_out< sc_logic > ns;
    // Port declarations for the virtual clock. 
    sc_in_clk ap_virtual_clock;


    // Module declarations
    inOutFunction(sc_module_name name);
    SC_HAS_PROCESS(inOutFunction);

    ~inOutFunction();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<1> > and_ln20_fu_117_p2;
    sc_signal< sc_lv<1> > and_ln21_1_fu_142_p2;
    sc_signal< sc_lv<1> > and_ln22_fu_155_p2;
    sc_signal< sc_lv<1> > and_ln23_fu_180_p2;
    sc_signal< sc_lv<1> > xor_ln25_fu_199_p2;
    sc_signal< sc_lv<1> > and_ln20_fu_117_p0;
    sc_signal< sc_lv<1> > and_ln20_fu_117_p1;
    sc_signal< sc_lv<1> > xor_ln21_fu_124_p0;
    sc_signal< sc_lv<1> > xor_ln21_fu_124_p1;
    sc_signal< sc_lv<1> > and_ln21_fu_130_p0;
    sc_signal< sc_lv<1> > and_ln21_fu_130_p1;
    sc_signal< sc_lv<1> > and_ln21_fu_130_p2;
    sc_signal< sc_lv<1> > xor_ln21_fu_124_p2;
    sc_signal< sc_lv<1> > xor_ln21_1_fu_136_p2;
    sc_signal< sc_lv<1> > xor_ln22_fu_149_p2;
    sc_signal< sc_lv<1> > xor_ln23_fu_162_p0;
    sc_signal< sc_lv<1> > xor_ln23_fu_162_p1;
    sc_signal< sc_lv<1> > or_ln24_fu_168_p0;
    sc_signal< sc_lv<1> > or_ln24_fu_168_p1;
    sc_signal< sc_lv<1> > or_ln24_fu_168_p2;
    sc_signal< sc_lv<1> > xor_ln23_fu_162_p2;
    sc_signal< sc_lv<1> > xor_ln24_fu_174_p2;
    sc_signal< sc_lv<1> > or_ln25_fu_187_p1;
    sc_signal< sc_lv<1> > or_ln25_fu_187_p2;
    sc_signal< sc_lv<1> > or_ln25_1_fu_193_p1;
    sc_signal< sc_lv<1> > or_ln25_1_fu_193_p2;
    sc_signal< sc_lv<1> > or_ln27_fu_206_p2;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_and_ln20_fu_117_p0();
    void thread_and_ln20_fu_117_p1();
    void thread_and_ln20_fu_117_p2();
    void thread_and_ln21_1_fu_142_p2();
    void thread_and_ln21_fu_130_p0();
    void thread_and_ln21_fu_130_p1();
    void thread_and_ln21_fu_130_p2();
    void thread_and_ln22_fu_155_p2();
    void thread_and_ln23_fu_180_p2();
    void thread_ew();
    void thread_ns();
    void thread_or_ln24_fu_168_p0();
    void thread_or_ln24_fu_168_p1();
    void thread_or_ln24_fu_168_p2();
    void thread_or_ln25_1_fu_193_p1();
    void thread_or_ln25_1_fu_193_p2();
    void thread_or_ln25_fu_187_p1();
    void thread_or_ln25_fu_187_p2();
    void thread_or_ln27_fu_206_p2();
    void thread_rule1();
    void thread_rule2();
    void thread_rule3();
    void thread_rule4();
    void thread_rule5();
    void thread_xor_ln21_1_fu_136_p2();
    void thread_xor_ln21_fu_124_p0();
    void thread_xor_ln21_fu_124_p1();
    void thread_xor_ln21_fu_124_p2();
    void thread_xor_ln22_fu_149_p2();
    void thread_xor_ln23_fu_162_p0();
    void thread_xor_ln23_fu_162_p1();
    void thread_xor_ln23_fu_162_p2();
    void thread_xor_ln24_fu_174_p2();
    void thread_xor_ln25_fu_199_p2();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
