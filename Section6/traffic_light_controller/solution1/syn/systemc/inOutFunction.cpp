// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "inOutFunction.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const bool inOutFunction::ap_const_boolean_1 = true;
const sc_lv<1> inOutFunction::ap_const_lv1_1 = "1";
const sc_logic inOutFunction::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic inOutFunction::ap_const_logic_0 = sc_dt::Log_0;

inOutFunction::inOutFunction(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_and_ln20_fu_117_p0);
    sensitive << ( l );

    SC_METHOD(thread_and_ln20_fu_117_p1);
    sensitive << ( r );

    SC_METHOD(thread_and_ln20_fu_117_p2);
    sensitive << ( and_ln20_fu_117_p0 );
    sensitive << ( and_ln20_fu_117_p1 );

    SC_METHOD(thread_and_ln21_1_fu_142_p2);
    sensitive << ( xor_ln21_fu_124_p2 );
    sensitive << ( xor_ln21_1_fu_136_p2 );

    SC_METHOD(thread_and_ln21_fu_130_p0);
    sensitive << ( u );

    SC_METHOD(thread_and_ln21_fu_130_p1);
    sensitive << ( d );

    SC_METHOD(thread_and_ln21_fu_130_p2);
    sensitive << ( and_ln21_fu_130_p0 );
    sensitive << ( and_ln21_fu_130_p1 );

    SC_METHOD(thread_and_ln22_fu_155_p2);
    sensitive << ( and_ln21_fu_130_p2 );
    sensitive << ( xor_ln22_fu_149_p2 );

    SC_METHOD(thread_and_ln23_fu_180_p2);
    sensitive << ( xor_ln23_fu_162_p2 );
    sensitive << ( xor_ln24_fu_174_p2 );

    SC_METHOD(thread_ew);
    sensitive << ( and_ln21_1_fu_142_p2 );
    sensitive << ( or_ln27_fu_206_p2 );

    SC_METHOD(thread_ns);
    sensitive << ( and_ln22_fu_155_p2 );
    sensitive << ( and_ln23_fu_180_p2 );

    SC_METHOD(thread_or_ln24_fu_168_p0);
    sensitive << ( l );

    SC_METHOD(thread_or_ln24_fu_168_p1);
    sensitive << ( r );

    SC_METHOD(thread_or_ln24_fu_168_p2);
    sensitive << ( or_ln24_fu_168_p0 );
    sensitive << ( or_ln24_fu_168_p1 );

    SC_METHOD(thread_or_ln25_1_fu_193_p1);
    sensitive << ( u );

    SC_METHOD(thread_or_ln25_1_fu_193_p2);
    sensitive << ( or_ln25_fu_187_p2 );
    sensitive << ( or_ln25_1_fu_193_p1 );

    SC_METHOD(thread_or_ln25_fu_187_p1);
    sensitive << ( d );

    SC_METHOD(thread_or_ln25_fu_187_p2);
    sensitive << ( or_ln24_fu_168_p2 );
    sensitive << ( or_ln25_fu_187_p1 );

    SC_METHOD(thread_or_ln27_fu_206_p2);
    sensitive << ( and_ln20_fu_117_p2 );
    sensitive << ( xor_ln25_fu_199_p2 );

    SC_METHOD(thread_rule1);
    sensitive << ( and_ln20_fu_117_p2 );

    SC_METHOD(thread_rule2);
    sensitive << ( and_ln21_1_fu_142_p2 );

    SC_METHOD(thread_rule3);
    sensitive << ( and_ln22_fu_155_p2 );

    SC_METHOD(thread_rule4);
    sensitive << ( and_ln23_fu_180_p2 );

    SC_METHOD(thread_rule5);
    sensitive << ( xor_ln25_fu_199_p2 );

    SC_METHOD(thread_xor_ln21_1_fu_136_p2);
    sensitive << ( and_ln21_fu_130_p2 );

    SC_METHOD(thread_xor_ln21_fu_124_p0);
    sensitive << ( r );

    SC_METHOD(thread_xor_ln21_fu_124_p1);
    sensitive << ( l );

    SC_METHOD(thread_xor_ln21_fu_124_p2);
    sensitive << ( xor_ln21_fu_124_p0 );
    sensitive << ( xor_ln21_fu_124_p1 );

    SC_METHOD(thread_xor_ln22_fu_149_p2);
    sensitive << ( and_ln20_fu_117_p2 );

    SC_METHOD(thread_xor_ln23_fu_162_p0);
    sensitive << ( u );

    SC_METHOD(thread_xor_ln23_fu_162_p1);
    sensitive << ( d );

    SC_METHOD(thread_xor_ln23_fu_162_p2);
    sensitive << ( xor_ln23_fu_162_p0 );
    sensitive << ( xor_ln23_fu_162_p1 );

    SC_METHOD(thread_xor_ln24_fu_174_p2);
    sensitive << ( or_ln24_fu_168_p2 );

    SC_METHOD(thread_xor_ln25_fu_199_p2);
    sensitive << ( or_ln25_1_fu_193_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "inOutFunction_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, l, "(port)l");
    sc_trace(mVcdFile, r, "(port)r");
    sc_trace(mVcdFile, u, "(port)u");
    sc_trace(mVcdFile, d, "(port)d");
    sc_trace(mVcdFile, rule1, "(port)rule1");
    sc_trace(mVcdFile, rule2, "(port)rule2");
    sc_trace(mVcdFile, rule3, "(port)rule3");
    sc_trace(mVcdFile, rule4, "(port)rule4");
    sc_trace(mVcdFile, rule5, "(port)rule5");
    sc_trace(mVcdFile, ew, "(port)ew");
    sc_trace(mVcdFile, ns, "(port)ns");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, and_ln20_fu_117_p2, "and_ln20_fu_117_p2");
    sc_trace(mVcdFile, and_ln21_1_fu_142_p2, "and_ln21_1_fu_142_p2");
    sc_trace(mVcdFile, and_ln22_fu_155_p2, "and_ln22_fu_155_p2");
    sc_trace(mVcdFile, and_ln23_fu_180_p2, "and_ln23_fu_180_p2");
    sc_trace(mVcdFile, xor_ln25_fu_199_p2, "xor_ln25_fu_199_p2");
    sc_trace(mVcdFile, and_ln20_fu_117_p0, "and_ln20_fu_117_p0");
    sc_trace(mVcdFile, and_ln20_fu_117_p1, "and_ln20_fu_117_p1");
    sc_trace(mVcdFile, xor_ln21_fu_124_p0, "xor_ln21_fu_124_p0");
    sc_trace(mVcdFile, xor_ln21_fu_124_p1, "xor_ln21_fu_124_p1");
    sc_trace(mVcdFile, and_ln21_fu_130_p0, "and_ln21_fu_130_p0");
    sc_trace(mVcdFile, and_ln21_fu_130_p1, "and_ln21_fu_130_p1");
    sc_trace(mVcdFile, and_ln21_fu_130_p2, "and_ln21_fu_130_p2");
    sc_trace(mVcdFile, xor_ln21_fu_124_p2, "xor_ln21_fu_124_p2");
    sc_trace(mVcdFile, xor_ln21_1_fu_136_p2, "xor_ln21_1_fu_136_p2");
    sc_trace(mVcdFile, xor_ln22_fu_149_p2, "xor_ln22_fu_149_p2");
    sc_trace(mVcdFile, xor_ln23_fu_162_p0, "xor_ln23_fu_162_p0");
    sc_trace(mVcdFile, xor_ln23_fu_162_p1, "xor_ln23_fu_162_p1");
    sc_trace(mVcdFile, or_ln24_fu_168_p0, "or_ln24_fu_168_p0");
    sc_trace(mVcdFile, or_ln24_fu_168_p1, "or_ln24_fu_168_p1");
    sc_trace(mVcdFile, or_ln24_fu_168_p2, "or_ln24_fu_168_p2");
    sc_trace(mVcdFile, xor_ln23_fu_162_p2, "xor_ln23_fu_162_p2");
    sc_trace(mVcdFile, xor_ln24_fu_174_p2, "xor_ln24_fu_174_p2");
    sc_trace(mVcdFile, or_ln25_fu_187_p1, "or_ln25_fu_187_p1");
    sc_trace(mVcdFile, or_ln25_fu_187_p2, "or_ln25_fu_187_p2");
    sc_trace(mVcdFile, or_ln25_1_fu_193_p1, "or_ln25_1_fu_193_p1");
    sc_trace(mVcdFile, or_ln25_1_fu_193_p2, "or_ln25_1_fu_193_p2");
    sc_trace(mVcdFile, or_ln27_fu_206_p2, "or_ln27_fu_206_p2");
#endif

    }
    mHdltvinHandle.open("inOutFunction.hdltvin.dat");
    mHdltvoutHandle.open("inOutFunction.hdltvout.dat");
}

inOutFunction::~inOutFunction() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void inOutFunction::thread_and_ln20_fu_117_p0() {
    and_ln20_fu_117_p0 =  (sc_lv<1>) (l.read());
}

void inOutFunction::thread_and_ln20_fu_117_p1() {
    and_ln20_fu_117_p1 =  (sc_lv<1>) (r.read());
}

void inOutFunction::thread_and_ln20_fu_117_p2() {
    and_ln20_fu_117_p2 = (and_ln20_fu_117_p0.read() & and_ln20_fu_117_p1.read());
}

void inOutFunction::thread_and_ln21_1_fu_142_p2() {
    and_ln21_1_fu_142_p2 = (xor_ln21_fu_124_p2.read() & xor_ln21_1_fu_136_p2.read());
}

void inOutFunction::thread_and_ln21_fu_130_p0() {
    and_ln21_fu_130_p0 =  (sc_lv<1>) (u.read());
}

void inOutFunction::thread_and_ln21_fu_130_p1() {
    and_ln21_fu_130_p1 =  (sc_lv<1>) (d.read());
}

void inOutFunction::thread_and_ln21_fu_130_p2() {
    and_ln21_fu_130_p2 = (and_ln21_fu_130_p0.read() & and_ln21_fu_130_p1.read());
}

void inOutFunction::thread_and_ln22_fu_155_p2() {
    and_ln22_fu_155_p2 = (and_ln21_fu_130_p2.read() & xor_ln22_fu_149_p2.read());
}

void inOutFunction::thread_and_ln23_fu_180_p2() {
    and_ln23_fu_180_p2 = (xor_ln23_fu_162_p2.read() & xor_ln24_fu_174_p2.read());
}

void inOutFunction::thread_ew() {
    ew =  (sc_logic) ((or_ln27_fu_206_p2.read() | and_ln21_1_fu_142_p2.read()))[0];
}

void inOutFunction::thread_ns() {
    ns =  (sc_logic) ((and_ln22_fu_155_p2.read() | and_ln23_fu_180_p2.read()))[0];
}

void inOutFunction::thread_or_ln24_fu_168_p0() {
    or_ln24_fu_168_p0 =  (sc_lv<1>) (l.read());
}

void inOutFunction::thread_or_ln24_fu_168_p1() {
    or_ln24_fu_168_p1 =  (sc_lv<1>) (r.read());
}

void inOutFunction::thread_or_ln24_fu_168_p2() {
    or_ln24_fu_168_p2 = (or_ln24_fu_168_p0.read() | or_ln24_fu_168_p1.read());
}

void inOutFunction::thread_or_ln25_1_fu_193_p1() {
    or_ln25_1_fu_193_p1 =  (sc_lv<1>) (u.read());
}

void inOutFunction::thread_or_ln25_1_fu_193_p2() {
    or_ln25_1_fu_193_p2 = (or_ln25_fu_187_p2.read() | or_ln25_1_fu_193_p1.read());
}

void inOutFunction::thread_or_ln25_fu_187_p1() {
    or_ln25_fu_187_p1 =  (sc_lv<1>) (d.read());
}

void inOutFunction::thread_or_ln25_fu_187_p2() {
    or_ln25_fu_187_p2 = (or_ln24_fu_168_p2.read() | or_ln25_fu_187_p1.read());
}

void inOutFunction::thread_or_ln27_fu_206_p2() {
    or_ln27_fu_206_p2 = (and_ln20_fu_117_p2.read() | xor_ln25_fu_199_p2.read());
}

void inOutFunction::thread_rule1() {
    rule1 =  (sc_logic) (and_ln20_fu_117_p2.read()[0]);
}

void inOutFunction::thread_rule2() {
    rule2 =  (sc_logic) (and_ln21_1_fu_142_p2.read()[0]);
}

void inOutFunction::thread_rule3() {
    rule3 =  (sc_logic) (and_ln22_fu_155_p2.read()[0]);
}

void inOutFunction::thread_rule4() {
    rule4 =  (sc_logic) (and_ln23_fu_180_p2.read()[0]);
}

void inOutFunction::thread_rule5() {
    rule5 =  (sc_logic) (xor_ln25_fu_199_p2.read()[0]);
}

void inOutFunction::thread_xor_ln21_1_fu_136_p2() {
    xor_ln21_1_fu_136_p2 = (and_ln21_fu_130_p2.read() ^ ap_const_lv1_1);
}

void inOutFunction::thread_xor_ln21_fu_124_p0() {
    xor_ln21_fu_124_p0 =  (sc_lv<1>) (r.read());
}

void inOutFunction::thread_xor_ln21_fu_124_p1() {
    xor_ln21_fu_124_p1 =  (sc_lv<1>) (l.read());
}

void inOutFunction::thread_xor_ln21_fu_124_p2() {
    xor_ln21_fu_124_p2 = (xor_ln21_fu_124_p0.read() ^ xor_ln21_fu_124_p1.read());
}

void inOutFunction::thread_xor_ln22_fu_149_p2() {
    xor_ln22_fu_149_p2 = (and_ln20_fu_117_p2.read() ^ ap_const_lv1_1);
}

void inOutFunction::thread_xor_ln23_fu_162_p0() {
    xor_ln23_fu_162_p0 =  (sc_lv<1>) (u.read());
}

void inOutFunction::thread_xor_ln23_fu_162_p1() {
    xor_ln23_fu_162_p1 =  (sc_lv<1>) (d.read());
}

void inOutFunction::thread_xor_ln23_fu_162_p2() {
    xor_ln23_fu_162_p2 = (xor_ln23_fu_162_p0.read() ^ xor_ln23_fu_162_p1.read());
}

void inOutFunction::thread_xor_ln24_fu_174_p2() {
    xor_ln24_fu_174_p2 = (or_ln24_fu_168_p2.read() ^ ap_const_lv1_1);
}

void inOutFunction::thread_xor_ln25_fu_199_p2() {
    xor_ln25_fu_199_p2 = (or_ln25_1_fu_193_p2.read() ^ ap_const_lv1_1);
}

void inOutFunction::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"l\" :  \"" << l.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"r\" :  \"" << r.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"u\" :  \"" << u.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"d\" :  \"" << d.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"rule1\" :  \"" << rule1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"rule2\" :  \"" << rule2.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"rule3\" :  \"" << rule3.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"rule4\" :  \"" << rule4.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"rule5\" :  \"" << rule5.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ew\" :  \"" << ew.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ns\" :  \"" << ns.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

