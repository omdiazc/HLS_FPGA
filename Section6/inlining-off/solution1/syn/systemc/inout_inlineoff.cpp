// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "inout_inlineoff.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const bool inout_inlineoff::ap_const_boolean_1 = true;
const sc_logic inout_inlineoff::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic inout_inlineoff::ap_const_logic_0 = sc_dt::Log_0;

inout_inlineoff::inout_inlineoff(sc_module_name name) : sc_module(name), mVcdFile(0) {
    tmp_andGate_fu_59 = new andGate("tmp_andGate_fu_59");
    tmp_andGate_fu_59->ap_ready(tmp_andGate_fu_59_ap_ready);
    tmp_andGate_fu_59->a(a);
    tmp_andGate_fu_59->b(b);
    tmp_andGate_fu_59->ap_return(tmp_andGate_fu_59_ap_return);
    tmp_2_orGate_fu_67 = new orGate("tmp_2_orGate_fu_67");
    tmp_2_orGate_fu_67->ap_ready(tmp_2_orGate_fu_67_ap_ready);
    tmp_2_orGate_fu_67->a(tmp_2_orGate_fu_67_a);
    tmp_2_orGate_fu_67->b(tmp_2_orGate_fu_67_b);
    tmp_2_orGate_fu_67->ap_return(tmp_2_orGate_fu_67_ap_return);
    tmp_1_notGate_fu_75 = new notGate("tmp_1_notGate_fu_75");
    tmp_1_notGate_fu_75->ap_ready(tmp_1_notGate_fu_75_ap_ready);
    tmp_1_notGate_fu_75->a(c);
    tmp_1_notGate_fu_75->ap_return(tmp_1_notGate_fu_75_ap_return);

    SC_METHOD(thread_d);
    sensitive << ( tmp_2_orGate_fu_67_ap_return );

    SC_METHOD(thread_tmp_2_orGate_fu_67_a);
    sensitive << ( tmp_andGate_fu_59_ap_return );

    SC_METHOD(thread_tmp_2_orGate_fu_67_b);
    sensitive << ( tmp_1_notGate_fu_75_ap_return );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "inout_inlineoff_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, a, "(port)a");
    sc_trace(mVcdFile, b, "(port)b");
    sc_trace(mVcdFile, c, "(port)c");
    sc_trace(mVcdFile, d, "(port)d");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_andGate_fu_59_ap_ready, "tmp_andGate_fu_59_ap_ready");
    sc_trace(mVcdFile, tmp_andGate_fu_59_ap_return, "tmp_andGate_fu_59_ap_return");
    sc_trace(mVcdFile, tmp_2_orGate_fu_67_ap_ready, "tmp_2_orGate_fu_67_ap_ready");
    sc_trace(mVcdFile, tmp_2_orGate_fu_67_a, "tmp_2_orGate_fu_67_a");
    sc_trace(mVcdFile, tmp_2_orGate_fu_67_b, "tmp_2_orGate_fu_67_b");
    sc_trace(mVcdFile, tmp_2_orGate_fu_67_ap_return, "tmp_2_orGate_fu_67_ap_return");
    sc_trace(mVcdFile, tmp_1_notGate_fu_75_ap_ready, "tmp_1_notGate_fu_75_ap_ready");
    sc_trace(mVcdFile, tmp_1_notGate_fu_75_ap_return, "tmp_1_notGate_fu_75_ap_return");
#endif

    }
    mHdltvinHandle.open("inout_inlineoff.hdltvin.dat");
    mHdltvoutHandle.open("inout_inlineoff.hdltvout.dat");
}

inout_inlineoff::~inout_inlineoff() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete tmp_andGate_fu_59;
    delete tmp_2_orGate_fu_67;
    delete tmp_1_notGate_fu_75;
}

void inout_inlineoff::thread_d() {
    d =  (sc_logic) (tmp_2_orGate_fu_67_ap_return.read()[0]);
}

void inout_inlineoff::thread_tmp_2_orGate_fu_67_a() {
    tmp_2_orGate_fu_67_a =  (sc_logic) (tmp_andGate_fu_59_ap_return.read()[0]);
}

void inout_inlineoff::thread_tmp_2_orGate_fu_67_b() {
    tmp_2_orGate_fu_67_b =  (sc_logic) (tmp_1_notGate_fu_75_ap_return.read()[0]);
}

void inout_inlineoff::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"a\" :  \"" << a.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b\" :  \"" << b.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"c\" :  \"" << c.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"d\" :  \"" << d.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

