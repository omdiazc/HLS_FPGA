// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "andGate.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic andGate::ap_const_logic_1 = sc_dt::Log_1;
const bool andGate::ap_const_boolean_1 = true;
const sc_logic andGate::ap_const_logic_0 = sc_dt::Log_0;

andGate::andGate(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_and_ln5_fu_18_p0);
    sensitive << ( a );

    SC_METHOD(thread_and_ln5_fu_18_p1);
    sensitive << ( b );

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( and_ln5_fu_18_p0 );
    sensitive << ( and_ln5_fu_18_p1 );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "andGate_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a, "(port)a");
    sc_trace(mVcdFile, b, "(port)b");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, and_ln5_fu_18_p0, "and_ln5_fu_18_p0");
    sc_trace(mVcdFile, and_ln5_fu_18_p1, "and_ln5_fu_18_p1");
#endif

    }
}

andGate::~andGate() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void andGate::thread_and_ln5_fu_18_p0() {
    and_ln5_fu_18_p0 =  (sc_lv<1>) (a.read());
}

void andGate::thread_and_ln5_fu_18_p1() {
    and_ln5_fu_18_p1 =  (sc_lv<1>) (b.read());
}

void andGate::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void andGate::thread_ap_return() {
    ap_return = (and_ln5_fu_18_p0.read() & and_ln5_fu_18_p1.read());
}

}

