// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="inOutFunction,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.934000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=34,HLS_VERSION=2020_1}" *)

module inOutFunction (
        l,
        r,
        u,
        d,
        rule1,
        rule2,
        rule3,
        rule4,
        rule5,
        ew,
        ns
);


input   l;
input   r;
input   u;
input   d;
output   rule1;
output   rule2;
output   rule3;
output   rule4;
output   rule5;
output   ew;
output   ns;

wire   [0:0] and_ln20_fu_117_p2;
wire   [0:0] and_ln21_1_fu_142_p2;
wire   [0:0] and_ln22_fu_155_p2;
wire   [0:0] and_ln23_fu_180_p2;
wire   [0:0] xor_ln25_fu_199_p2;
wire   [0:0] and_ln20_fu_117_p0;
wire   [0:0] and_ln20_fu_117_p1;
wire   [0:0] xor_ln21_fu_124_p0;
wire   [0:0] xor_ln21_fu_124_p1;
wire   [0:0] and_ln21_fu_130_p0;
wire   [0:0] and_ln21_fu_130_p1;
wire   [0:0] and_ln21_fu_130_p2;
wire   [0:0] xor_ln21_fu_124_p2;
wire   [0:0] xor_ln21_1_fu_136_p2;
wire   [0:0] xor_ln22_fu_149_p2;
wire   [0:0] xor_ln23_fu_162_p0;
wire   [0:0] xor_ln23_fu_162_p1;
wire   [0:0] or_ln24_fu_168_p0;
wire   [0:0] or_ln24_fu_168_p1;
wire   [0:0] or_ln24_fu_168_p2;
wire   [0:0] xor_ln23_fu_162_p2;
wire   [0:0] xor_ln24_fu_174_p2;
wire   [0:0] or_ln25_fu_187_p1;
wire   [0:0] or_ln25_fu_187_p2;
wire   [0:0] or_ln25_1_fu_193_p1;
wire   [0:0] or_ln25_1_fu_193_p2;
wire   [0:0] or_ln27_fu_206_p2;

assign and_ln20_fu_117_p0 = l;

assign and_ln20_fu_117_p1 = r;

assign and_ln20_fu_117_p2 = (and_ln20_fu_117_p1 & and_ln20_fu_117_p0);

assign and_ln21_1_fu_142_p2 = (xor_ln21_fu_124_p2 & xor_ln21_1_fu_136_p2);

assign and_ln21_fu_130_p0 = u;

assign and_ln21_fu_130_p1 = d;

assign and_ln21_fu_130_p2 = (and_ln21_fu_130_p1 & and_ln21_fu_130_p0);

assign and_ln22_fu_155_p2 = (xor_ln22_fu_149_p2 & and_ln21_fu_130_p2);

assign and_ln23_fu_180_p2 = (xor_ln24_fu_174_p2 & xor_ln23_fu_162_p2);

assign ew = (or_ln27_fu_206_p2 | and_ln21_1_fu_142_p2);

assign ns = (and_ln23_fu_180_p2 | and_ln22_fu_155_p2);

assign or_ln24_fu_168_p0 = l;

assign or_ln24_fu_168_p1 = r;

assign or_ln24_fu_168_p2 = (or_ln24_fu_168_p1 | or_ln24_fu_168_p0);

assign or_ln25_1_fu_193_p1 = u;

assign or_ln25_1_fu_193_p2 = (or_ln25_fu_187_p2 | or_ln25_1_fu_193_p1);

assign or_ln25_fu_187_p1 = d;

assign or_ln25_fu_187_p2 = (or_ln25_fu_187_p1 | or_ln24_fu_168_p2);

assign or_ln27_fu_206_p2 = (xor_ln25_fu_199_p2 | and_ln20_fu_117_p2);

assign rule1 = and_ln20_fu_117_p2;

assign rule2 = and_ln21_1_fu_142_p2;

assign rule3 = and_ln22_fu_155_p2;

assign rule4 = and_ln23_fu_180_p2;

assign rule5 = xor_ln25_fu_199_p2;

assign xor_ln21_1_fu_136_p2 = (1'd1 ^ and_ln21_fu_130_p2);

assign xor_ln21_fu_124_p0 = r;

assign xor_ln21_fu_124_p1 = l;

assign xor_ln21_fu_124_p2 = (xor_ln21_fu_124_p1 ^ xor_ln21_fu_124_p0);

assign xor_ln22_fu_149_p2 = (1'd1 ^ and_ln20_fu_117_p2);

assign xor_ln23_fu_162_p0 = u;

assign xor_ln23_fu_162_p1 = d;

assign xor_ln23_fu_162_p2 = (xor_ln23_fu_162_p1 ^ xor_ln23_fu_162_p0);

assign xor_ln24_fu_174_p2 = (or_ln24_fu_168_p2 ^ 1'd1);

assign xor_ln25_fu_199_p2 = (or_ln25_1_fu_193_p2 ^ 1'd1);

endmodule //inOutFunction
