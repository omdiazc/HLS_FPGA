// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mul.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic mul::ap_const_logic_1 = sc_dt::Log_1;
const bool mul::ap_const_boolean_1 = true;
const sc_logic mul::ap_const_logic_0 = sc_dt::Log_0;

mul::mul(sc_module_name name) : sc_module(name), mVcdFile(0) {
    inOutFunction_mulbkb_U1 = new inOutFunction_mulbkb<1,1,32,32,32>("inOutFunction_mulbkb_U1");
    inOutFunction_mulbkb_U1->din0(b);
    inOutFunction_mulbkb_U1->din1(a);
    inOutFunction_mulbkb_U1->dout(t_fu_26_p2);

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ap_return);
    sensitive << ( t_fu_26_p2 );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mul_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a, "(port)a");
    sc_trace(mVcdFile, b, "(port)b");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, t_fu_26_p2, "t_fu_26_p2");
#endif

    }
}

mul::~mul() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete inOutFunction_mulbkb_U1;
}

void mul::thread_ap_ready() {
    ap_ready = ap_const_logic_1;
}

void mul::thread_ap_return() {
    ap_return = t_fu_26_p2.read();
}

}

