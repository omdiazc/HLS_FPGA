-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inOutFunction is
port (
    a : IN STD_LOGIC_VECTOR (31 downto 0);
    b : IN STD_LOGIC_VECTOR (31 downto 0);
    c : IN STD_LOGIC_VECTOR (31 downto 0);
    d : IN STD_LOGIC_VECTOR (31 downto 0);
    f : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of inOutFunction is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "inOutFunction,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=20.963000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=13,HLS_SYN_FF=0,HLS_SYN_LUT=123,HLS_VERSION=2020_1}";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal t_4_fu_101_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_fu_71_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_fu_71_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_1_fu_77_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_1_fu_77_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_1_fu_77_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_fu_71_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_fu_89_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_fu_89_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln15_fu_89_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_3_fu_95_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_4_fu_101_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_4_fu_101_p1 : STD_LOGIC_VECTOR (31 downto 0);

    component inOutFunction_addbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    inOutFunction_addbkb_U1 : component inOutFunction_addbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => t_4_fu_101_p0,
        din1 => t_4_fu_101_p1,
        dout => t_4_fu_101_p2);




    add_ln15_fu_89_p0 <= c;
    add_ln15_fu_89_p1 <= b;
    add_ln15_fu_89_p2 <= std_logic_vector(signed(add_ln15_fu_89_p0) + signed(add_ln15_fu_89_p1));
    f <= t_4_fu_101_p2;
    t_1_fu_77_p0 <= d;
    t_1_fu_77_p1 <= c;
    t_1_fu_77_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(t_1_fu_77_p0) * signed(t_1_fu_77_p1))), 32));
    t_3_fu_95_p1 <= a;
    t_4_fu_101_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(t_1_fu_77_p2) * signed(t_fu_71_p2))), 32));
    t_4_fu_101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(add_ln15_fu_89_p2) * signed(t_3_fu_95_p1))), 32));
    t_fu_71_p0 <= b;
    t_fu_71_p1 <= a;
    t_fu_71_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(t_fu_71_p0) * signed(t_fu_71_p1))), 32));
end behav;
