-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inOutFunction is
port (
    a : IN STD_LOGIC_VECTOR (31 downto 0);
    b : IN STD_LOGIC_VECTOR (31 downto 0);
    c : IN STD_LOGIC_VECTOR (31 downto 0);
    f : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of inOutFunction is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "inOutFunction,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=30.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=22.344000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=9,HLS_SYN_FF=0,HLS_SYN_LUT=180,HLS_VERSION=2020_1}";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal add_ln12_fu_53_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln12_fu_53_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln12_fu_53_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_fu_59_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_1_fu_65_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_1_fu_65_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_1_fu_65_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_71_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_71_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_77_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_77_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln12_fu_59_p2 : STD_LOGIC_VECTOR (31 downto 0);


begin



    add_ln12_fu_53_p0 <= c;
    add_ln12_fu_53_p1 <= b;
    add_ln12_fu_53_p2 <= std_logic_vector(signed(add_ln12_fu_53_p0) + signed(add_ln12_fu_53_p1));
    f <= std_logic_vector(unsigned(tmp1_fu_77_p2) + unsigned(mul_ln12_fu_59_p2));
    mul_ln12_1_fu_65_p0 <= b;
    mul_ln12_1_fu_65_p1 <= a;
    mul_ln12_1_fu_65_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln12_1_fu_65_p0) * signed(mul_ln12_1_fu_65_p1))), 32));
    mul_ln12_fu_59_p1 <= a;
    mul_ln12_fu_59_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(add_ln12_fu_53_p2) * signed(mul_ln12_fu_59_p1))), 32));
    tmp1_fu_77_p1 <= c;
    tmp1_fu_77_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_fu_71_p2) * signed(tmp1_fu_77_p1))), 32));
    tmp_fu_71_p1 <= b;
    tmp_fu_71_p2 <= std_logic_vector(unsigned(mul_ln12_1_fu_65_p2) + unsigned(tmp_fu_71_p1));
end behav;
