// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "inOutFunction.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const bool inOutFunction::ap_const_boolean_1 = true;
const sc_logic inOutFunction::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic inOutFunction::ap_const_logic_0 = sc_dt::Log_0;

inOutFunction::inOutFunction(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_add_ln12_fu_53_p0);
    sensitive << ( c );

    SC_METHOD(thread_add_ln12_fu_53_p1);
    sensitive << ( b );

    SC_METHOD(thread_add_ln12_fu_53_p2);
    sensitive << ( add_ln12_fu_53_p0 );
    sensitive << ( add_ln12_fu_53_p1 );

    SC_METHOD(thread_f);
    sensitive << ( tmp1_fu_77_p2 );
    sensitive << ( mul_ln12_fu_59_p2 );

    SC_METHOD(thread_mul_ln12_1_fu_65_p0);
    sensitive << ( b );

    SC_METHOD(thread_mul_ln12_1_fu_65_p1);
    sensitive << ( a );

    SC_METHOD(thread_mul_ln12_1_fu_65_p2);
    sensitive << ( mul_ln12_1_fu_65_p0 );
    sensitive << ( mul_ln12_1_fu_65_p1 );

    SC_METHOD(thread_mul_ln12_fu_59_p1);
    sensitive << ( a );

    SC_METHOD(thread_mul_ln12_fu_59_p2);
    sensitive << ( add_ln12_fu_53_p2 );
    sensitive << ( mul_ln12_fu_59_p1 );

    SC_METHOD(thread_tmp1_fu_77_p1);
    sensitive << ( c );

    SC_METHOD(thread_tmp1_fu_77_p2);
    sensitive << ( tmp_fu_71_p2 );
    sensitive << ( tmp1_fu_77_p1 );

    SC_METHOD(thread_tmp_fu_71_p1);
    sensitive << ( b );

    SC_METHOD(thread_tmp_fu_71_p2);
    sensitive << ( mul_ln12_1_fu_65_p2 );
    sensitive << ( tmp_fu_71_p1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "inOutFunction_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, a, "(port)a");
    sc_trace(mVcdFile, b, "(port)b");
    sc_trace(mVcdFile, c, "(port)c");
    sc_trace(mVcdFile, f, "(port)f");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, add_ln12_fu_53_p0, "add_ln12_fu_53_p0");
    sc_trace(mVcdFile, add_ln12_fu_53_p1, "add_ln12_fu_53_p1");
    sc_trace(mVcdFile, add_ln12_fu_53_p2, "add_ln12_fu_53_p2");
    sc_trace(mVcdFile, mul_ln12_fu_59_p1, "mul_ln12_fu_59_p1");
    sc_trace(mVcdFile, mul_ln12_1_fu_65_p0, "mul_ln12_1_fu_65_p0");
    sc_trace(mVcdFile, mul_ln12_1_fu_65_p1, "mul_ln12_1_fu_65_p1");
    sc_trace(mVcdFile, mul_ln12_1_fu_65_p2, "mul_ln12_1_fu_65_p2");
    sc_trace(mVcdFile, tmp_fu_71_p1, "tmp_fu_71_p1");
    sc_trace(mVcdFile, tmp_fu_71_p2, "tmp_fu_71_p2");
    sc_trace(mVcdFile, tmp1_fu_77_p1, "tmp1_fu_77_p1");
    sc_trace(mVcdFile, tmp1_fu_77_p2, "tmp1_fu_77_p2");
    sc_trace(mVcdFile, mul_ln12_fu_59_p2, "mul_ln12_fu_59_p2");
#endif

    }
    mHdltvinHandle.open("inOutFunction.hdltvin.dat");
    mHdltvoutHandle.open("inOutFunction.hdltvout.dat");
}

inOutFunction::~inOutFunction() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void inOutFunction::thread_add_ln12_fu_53_p0() {
    add_ln12_fu_53_p0 = c.read();
}

void inOutFunction::thread_add_ln12_fu_53_p1() {
    add_ln12_fu_53_p1 = b.read();
}

void inOutFunction::thread_add_ln12_fu_53_p2() {
    add_ln12_fu_53_p2 = (!add_ln12_fu_53_p0.read().is_01() || !add_ln12_fu_53_p1.read().is_01())? sc_lv<32>(): (sc_bigint<32>(add_ln12_fu_53_p0.read()) + sc_bigint<32>(add_ln12_fu_53_p1.read()));
}

void inOutFunction::thread_f() {
    f = (!tmp1_fu_77_p2.read().is_01() || !mul_ln12_fu_59_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp1_fu_77_p2.read()) + sc_biguint<32>(mul_ln12_fu_59_p2.read()));
}

void inOutFunction::thread_mul_ln12_1_fu_65_p0() {
    mul_ln12_1_fu_65_p0 = b.read();
}

void inOutFunction::thread_mul_ln12_1_fu_65_p1() {
    mul_ln12_1_fu_65_p1 = a.read();
}

void inOutFunction::thread_mul_ln12_1_fu_65_p2() {
    mul_ln12_1_fu_65_p2 = (!mul_ln12_1_fu_65_p0.read().is_01() || !mul_ln12_1_fu_65_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(mul_ln12_1_fu_65_p0.read()) * sc_bigint<32>(mul_ln12_1_fu_65_p1.read());
}

void inOutFunction::thread_mul_ln12_fu_59_p1() {
    mul_ln12_fu_59_p1 = a.read();
}

void inOutFunction::thread_mul_ln12_fu_59_p2() {
    mul_ln12_fu_59_p2 = (!add_ln12_fu_53_p2.read().is_01() || !mul_ln12_fu_59_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(add_ln12_fu_53_p2.read()) * sc_bigint<32>(mul_ln12_fu_59_p1.read());
}

void inOutFunction::thread_tmp1_fu_77_p1() {
    tmp1_fu_77_p1 = c.read();
}

void inOutFunction::thread_tmp1_fu_77_p2() {
    tmp1_fu_77_p2 = (!tmp_fu_71_p2.read().is_01() || !tmp1_fu_77_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(tmp_fu_71_p2.read()) * sc_bigint<32>(tmp1_fu_77_p1.read());
}

void inOutFunction::thread_tmp_fu_71_p1() {
    tmp_fu_71_p1 = b.read();
}

void inOutFunction::thread_tmp_fu_71_p2() {
    tmp_fu_71_p2 = (!mul_ln12_1_fu_65_p2.read().is_01() || !tmp_fu_71_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(mul_ln12_1_fu_65_p2.read()) + sc_bigint<32>(tmp_fu_71_p1.read()));
}

void inOutFunction::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"a\" :  \"" << a.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b\" :  \"" << b.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"c\" :  \"" << c.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"f\" :  \"" << f.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

