-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity inOutFunction is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    digit : OUT STD_LOGIC_VECTOR (7 downto 0);
    digit_ap_vld : OUT STD_LOGIC;
    anode : OUT STD_LOGIC_VECTOR (7 downto 0);
    anode_ap_vld : OUT STD_LOGIC;
    firstNumber : IN STD_LOGIC_VECTOR (31 downto 0);
    secondNumber : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of inOutFunction is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "inOutFunction,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.633250,HLS_SYN_LAT=4048,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=1478,HLS_SYN_LUT=1456,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (40 downto 0) := "00000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (40 downto 0) := "00000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (40 downto 0) := "00000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (40 downto 0) := "00000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (40 downto 0) := "00000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (40 downto 0) := "00000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (40 downto 0) := "00000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (40 downto 0) := "00001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (40 downto 0) := "00010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (40 downto 0) := "00100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (40 downto 0) := "01000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (40 downto 0) := "10000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv8_8 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_3E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111101000";
    constant ap_const_lv65_10624DD30 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000100000110001001001101110100110000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv18_19A : STD_LOGIC_VECTOR (17 downto 0) := "000000000110011010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv24_A3E : STD_LOGIC_VECTOR (23 downto 0) := "000000000000101000111110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (40 downto 0) := "00000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sevenSegmentNumbers_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sevenSegmentNumbers_ce0 : STD_LOGIC;
    signal sevenSegmentNumbers_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln66_fu_171_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln66_reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_462 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln52_fu_204_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_ln52_reg_468 : STD_LOGIC_VECTOR (64 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_13_reg_473 : STD_LOGIC_VECTOR (22 downto 0);
    signal select_ln52_1_fu_255_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln52_1_reg_478 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal sevenSegmentNumbers_7_reg_488 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal trunc_ln42_fu_266_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln42_reg_493 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal tmp_6_reg_498 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal grp_delay_fu_165_ap_ready : STD_LOGIC;
    signal grp_delay_fu_165_ap_done : STD_LOGIC;
    signal trunc_ln42_1_fu_292_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln42_1_reg_509 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_reg_514 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln47_fu_306_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln47_reg_519 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_reg_524 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal trunc_ln47_1_fu_373_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln47_1_reg_535 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_10_reg_540 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_delay_fu_165_ap_start : STD_LOGIC;
    signal grp_delay_fu_165_ap_idle : STD_LOGIC;
    signal grp_delay_fu_165_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal sext_ln52_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln36_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln42_fu_365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln47_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_fu_318_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln42_fu_385_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln47_fu_437_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln52_fu_442_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_177_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_191_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_196_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln52_fu_204_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln52_fu_220_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_12_fu_225_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln52_2_fu_235_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln52_3_fu_239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln52_fu_242_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln52_1_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_177_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_191_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln42_fu_286_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln42_fu_286_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_196_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln42_fu_323_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_7_fu_328_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln42_2_fu_338_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln42_3_fu_342_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln42_fu_345_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln42_1_fu_352_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln42_1_fu_358_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln47_fu_446_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln47_fu_390_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_9_fu_395_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln47_2_fu_405_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln47_3_fu_409_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln47_fu_412_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln47_1_fu_419_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln47_1_fu_425_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln47_fu_446_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_177_ap_start : STD_LOGIC;
    signal grp_fu_177_ap_done : STD_LOGIC;
    signal grp_fu_177_ce : STD_LOGIC;
    signal grp_fu_191_ap_start : STD_LOGIC;
    signal grp_fu_191_ap_done : STD_LOGIC;
    signal grp_fu_191_ce : STD_LOGIC;
    signal grp_fu_196_ap_start : STD_LOGIC;
    signal grp_fu_196_ap_done : STD_LOGIC;
    signal grp_fu_196_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (40 downto 0);

    component delay IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC );
    end component;


    component inOutFunction_srecud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inOutFunction_sredEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inOutFunction_sreeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component inOutFunction_mulfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component inOutFunction_sevbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;



begin
    sevenSegmentNumbers_U : component inOutFunction_sevbkb
    generic map (
        DataWidth => 7,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sevenSegmentNumbers_address0,
        ce0 => sevenSegmentNumbers_ce0,
        q0 => sevenSegmentNumbers_q0);

    grp_delay_fu_165 : component delay
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_delay_fu_165_ap_start,
        ap_done => grp_delay_fu_165_ap_done,
        ap_idle => grp_delay_fu_165_ap_idle,
        ap_ready => grp_delay_fu_165_ap_ready);

    inOutFunction_srecud_U1 : component inOutFunction_srecud
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_177_ap_start,
        done => grp_fu_177_ap_done,
        din0 => add_ln66_fu_171_p2,
        din1 => grp_fu_177_p1,
        ce => grp_fu_177_ce,
        dout => grp_fu_177_p2);

    inOutFunction_sredEe_U2 : component inOutFunction_sredEe
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 5,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_191_ap_start,
        done => grp_fu_191_ap_done,
        din0 => add_ln66_reg_454,
        din1 => grp_fu_191_p1,
        ce => grp_fu_191_ce,
        dout => grp_fu_191_p2);

    inOutFunction_sreeOg_U3 : component inOutFunction_sreeOg
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 11,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_196_ap_start,
        done => grp_fu_196_ap_done,
        din0 => add_ln66_reg_454,
        din1 => grp_fu_196_p1,
        ce => grp_fu_196_ce,
        dout => grp_fu_196_p2);

    inOutFunction_mulfYi_U4 : component inOutFunction_mulfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 11,
        dout_WIDTH => 24)
    port map (
        din0 => mul_ln47_fu_446_p0,
        din1 => trunc_ln47_reg_519,
        dout => mul_ln47_fu_446_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_delay_fu_165_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_delay_fu_165_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                    grp_delay_fu_165_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_delay_fu_165_ap_ready = ap_const_logic_1)) then 
                    grp_delay_fu_165_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln66_reg_454 <= add_ln66_fu_171_p2;
                tmp_11_reg_462 <= add_ln66_fu_171_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                mul_ln52_reg_468 <= mul_ln52_fu_204_p2;
                tmp_13_reg_473 <= mul_ln52_fu_204_p2(64 downto 42);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                select_ln52_1_reg_478 <= select_ln52_1_fu_255_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                sevenSegmentNumbers_7_reg_488 <= sevenSegmentNumbers_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                tmp_10_reg_540 <= mul_ln47_fu_446_p2(23 downto 18);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                tmp_6_reg_498 <= grp_fu_177_p2(7 downto 7);
                trunc_ln42_reg_493 <= trunc_ln42_fu_266_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) and (grp_delay_fu_165_ap_done = ap_const_logic_1))) then
                tmp_8_reg_524 <= grp_fu_196_p2(10 downto 10);
                tmp_reg_514 <= mul_ln42_fu_286_p2(17 downto 12);
                trunc_ln47_reg_519 <= trunc_ln47_fu_306_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) and (grp_delay_fu_165_ap_done = ap_const_logic_1) and (tmp_6_reg_498 = ap_const_lv1_1))) then
                trunc_ln42_1_reg_509 <= trunc_ln42_1_fu_292_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) and (tmp_8_reg_524 = ap_const_lv1_1))) then
                trunc_ln47_1_reg_535 <= trunc_ln47_1_fu_373_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state37, grp_delay_fu_165_ap_done, ap_CS_fsm_state39, ap_CS_fsm_state35, ap_CS_fsm_state41)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state35) and (grp_delay_fu_165_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state37) and (grp_delay_fu_165_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_state37;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state39) and (grp_delay_fu_165_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and (grp_delay_fu_165_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln66_fu_171_p2 <= std_logic_vector(unsigned(firstNumber) + unsigned(secondNumber));

    anode_assign_proc : process(grp_delay_fu_165_ap_done, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) and (grp_delay_fu_165_ap_done = ap_const_logic_1))) then 
            anode <= ap_const_lv8_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            anode <= ap_const_lv8_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) and (grp_delay_fu_165_ap_done = ap_const_logic_1))) then 
            anode <= ap_const_lv8_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            anode <= ap_const_lv8_8;
        else 
            anode <= "XXXXXXXX";
        end if; 
    end process;


    anode_ap_vld_assign_proc : process(grp_delay_fu_165_ap_done, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state41) and (grp_delay_fu_165_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state39) and (grp_delay_fu_165_ap_done = ap_const_logic_1)))) then 
            anode_ap_vld <= ap_const_logic_1;
        else 
            anode_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(grp_delay_fu_165_ap_done, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) and (grp_delay_fu_165_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_delay_fu_165_ap_done, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) and (grp_delay_fu_165_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    digit_assign_proc : process(grp_delay_fu_165_ap_done, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, zext_ln36_fu_318_p1, zext_ln42_fu_385_p1, zext_ln47_fu_437_p1, zext_ln52_fu_442_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) and (grp_delay_fu_165_ap_done = ap_const_logic_1))) then 
            digit <= zext_ln52_fu_442_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            digit <= zext_ln47_fu_437_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) and (grp_delay_fu_165_ap_done = ap_const_logic_1))) then 
            digit <= zext_ln42_fu_385_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            digit <= zext_ln36_fu_318_p1;
        else 
            digit <= "XXXXXXXX";
        end if; 
    end process;


    digit_ap_vld_assign_proc : process(grp_delay_fu_165_ap_done, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_logic_1 = ap_CS_fsm_state41) and (grp_delay_fu_165_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state39) and (grp_delay_fu_165_ap_done = ap_const_logic_1)))) then 
            digit_ap_vld <= ap_const_logic_1;
        else 
            digit_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_delay_fu_165_ap_start <= grp_delay_fu_165_ap_start_reg;

    grp_fu_177_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            grp_fu_177_ap_start <= ap_const_logic_1;
        else 
            grp_fu_177_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_177_ce_assign_proc : process(ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            grp_fu_177_ce <= ap_const_logic_0;
        else 
            grp_fu_177_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_177_p1 <= ap_const_lv32_64(8 - 1 downto 0);

    grp_fu_191_ap_start_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_191_ap_start <= ap_const_logic_1;
        else 
            grp_fu_191_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_191_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            grp_fu_191_ce <= ap_const_logic_0;
        else 
            grp_fu_191_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_191_p1 <= ap_const_lv32_A(5 - 1 downto 0);

    grp_fu_196_ap_start_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_196_ap_start <= ap_const_logic_1;
        else 
            grp_fu_196_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_196_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            grp_fu_196_ce <= ap_const_logic_0;
        else 
            grp_fu_196_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_196_p1 <= ap_const_lv32_3E8(11 - 1 downto 0);
    mul_ln42_fu_286_p1 <= trunc_ln42_reg_493;
    mul_ln42_fu_286_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv18_19A) * signed(mul_ln42_fu_286_p1))), 18));
    mul_ln47_fu_446_p0 <= ap_const_lv24_A3E(13 - 1 downto 0);
    mul_ln52_fu_204_p1 <= add_ln66_reg_454;
    mul_ln52_fu_204_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv65_10624DD30) * signed(mul_ln52_fu_204_p1))), 65));
    select_ln42_1_fu_358_p3 <= 
        sub_ln42_1_fu_352_p2 when (tmp_6_reg_498(0) = '1') else 
        sext_ln42_3_fu_342_p1;
    select_ln42_fu_345_p3 <= 
        sext_ln42_2_fu_338_p1 when (tmp_6_reg_498(0) = '1') else 
        sext_ln42_3_fu_342_p1;
    select_ln47_1_fu_425_p3 <= 
        sub_ln47_1_fu_419_p2 when (tmp_8_reg_524(0) = '1') else 
        sext_ln47_3_fu_409_p1;
    select_ln47_fu_412_p3 <= 
        sext_ln47_2_fu_405_p1 when (tmp_8_reg_524(0) = '1') else 
        sext_ln47_3_fu_409_p1;
    select_ln52_1_fu_255_p3 <= 
        sub_ln52_1_fu_249_p2 when (tmp_11_reg_462(0) = '1') else 
        sext_ln52_3_fu_239_p1;
    select_ln52_fu_242_p3 <= 
        sext_ln52_2_fu_235_p1 when (tmp_11_reg_462(0) = '1') else 
        sext_ln52_3_fu_239_p1;

    sevenSegmentNumbers_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, sext_ln52_fu_262_p1, sext_ln36_fu_278_p1, sext_ln42_fu_365_p1, sext_ln47_fu_432_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            sevenSegmentNumbers_address0 <= sext_ln47_fu_432_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            sevenSegmentNumbers_address0 <= sext_ln42_fu_365_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            sevenSegmentNumbers_address0 <= sext_ln36_fu_278_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            sevenSegmentNumbers_address0 <= sext_ln52_fu_262_p1(4 - 1 downto 0);
        else 
            sevenSegmentNumbers_address0 <= "XXXX";
        end if; 
    end process;


    sevenSegmentNumbers_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state37, grp_delay_fu_165_ap_done, ap_CS_fsm_state38, ap_CS_fsm_state39)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state39) and (grp_delay_fu_165_ap_done = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state37) and (grp_delay_fu_165_ap_done = ap_const_logic_1)))) then 
            sevenSegmentNumbers_ce0 <= ap_const_logic_1;
        else 
            sevenSegmentNumbers_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln36_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_191_p2),64));

        sext_ln42_2_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_328_p4),8));

        sext_ln42_3_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_reg_514),8));

        sext_ln42_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln42_1_fu_358_p3),64));

        sext_ln47_2_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_fu_395_p4),11));

        sext_ln47_3_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_reg_540),11));

        sext_ln47_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln47_1_fu_425_p3),64));

        sext_ln52_2_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_fu_225_p4),32));

        sext_ln52_3_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_reg_473),32));

        sext_ln52_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln52_1_reg_478),64));

    sub_ln42_1_fu_352_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(select_ln42_fu_345_p3));
    sub_ln42_fu_323_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(trunc_ln42_1_reg_509));
    sub_ln47_1_fu_419_p2 <= std_logic_vector(unsigned(ap_const_lv11_0) - unsigned(select_ln47_fu_412_p3));
    sub_ln47_fu_390_p2 <= std_logic_vector(unsigned(ap_const_lv23_0) - unsigned(trunc_ln47_1_reg_535));
    sub_ln52_1_fu_249_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(select_ln52_fu_242_p3));
    sub_ln52_fu_220_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_ln52_reg_468));
    tmp_12_fu_225_p4 <= sub_ln52_fu_220_p2(64 downto 42);
    tmp_7_fu_328_p4 <= sub_ln42_fu_323_p2(16 downto 12);
    tmp_9_fu_395_p4 <= sub_ln47_fu_390_p2(22 downto 18);
    trunc_ln42_1_fu_292_p1 <= mul_ln42_fu_286_p2(17 - 1 downto 0);
    trunc_ln42_fu_266_p1 <= grp_fu_177_p2(8 - 1 downto 0);
    trunc_ln47_1_fu_373_p1 <= mul_ln47_fu_446_p2(23 - 1 downto 0);
    trunc_ln47_fu_306_p1 <= grp_fu_196_p2(11 - 1 downto 0);
    zext_ln36_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sevenSegmentNumbers_q0),8));
    zext_ln42_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sevenSegmentNumbers_q0),8));
    zext_ln47_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sevenSegmentNumbers_q0),8));
    zext_ln52_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sevenSegmentNumbers_7_reg_488),8));
end behav;
