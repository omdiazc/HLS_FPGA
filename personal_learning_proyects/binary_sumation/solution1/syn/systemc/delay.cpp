// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "delay.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic delay::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic delay::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> delay::ap_ST_fsm_state1 = "1";
const sc_lv<3> delay::ap_ST_fsm_state2 = "10";
const sc_lv<3> delay::ap_ST_fsm_state3 = "100";
const sc_lv<32> delay::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> delay::ap_const_lv1_0 = "0";
const sc_lv<32> delay::ap_const_lv32_1 = "1";
const sc_lv<10> delay::ap_const_lv10_0 = "0000000000";
const sc_lv<10> delay::ap_const_lv10_3E8 = "1111101000";
const sc_lv<10> delay::ap_const_lv10_1 = "1";
const sc_lv<1> delay::ap_const_lv1_1 = "1";
const sc_lv<32> delay::ap_const_lv32_2 = "10";
const bool delay::ap_const_boolean_1 = true;

delay::delay(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_icmp_ln25_fu_41_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( j_0_reg_30 );

    SC_METHOD(thread_j_fu_47_p2);
    sensitive << ( j_0_reg_30 );

    SC_METHOD(thread_xor_ln27_fu_57_p2);
    sensitive << ( dummy );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln25_fu_41_p2 );

    ap_CS_fsm = "001";
    dummy = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "delay_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, dummy, "dummy");
    sc_trace(mVcdFile, j_fu_47_p2, "j_fu_47_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, j_0_reg_30, "j_0_reg_30");
    sc_trace(mVcdFile, icmp_ln25_fu_41_p2, "icmp_ln25_fu_41_p2");
    sc_trace(mVcdFile, xor_ln27_fu_57_p2, "xor_ln27_fu_57_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

delay::~delay() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void delay::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_fu_41_p2.read()))) {
        j_0_reg_30 = j_fu_47_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        j_0_reg_30 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_fu_41_p2.read()))) {
        dummy = xor_ln27_fu_57_p2.read();
    }
}

void delay::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void delay::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void delay::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void delay::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void delay::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void delay::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void delay::thread_icmp_ln25_fu_41_p2() {
    icmp_ln25_fu_41_p2 = (!j_0_reg_30.read().is_01() || !ap_const_lv10_3E8.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_30.read() == ap_const_lv10_3E8);
}

void delay::thread_j_fu_47_p2() {
    j_fu_47_p2 = (!j_0_reg_30.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(j_0_reg_30.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void delay::thread_xor_ln27_fu_57_p2() {
    xor_ln27_fu_57_p2 = (dummy.read() ^ ap_const_lv1_1);
}

void delay::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln25_fu_41_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

